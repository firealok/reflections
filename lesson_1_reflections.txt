How did viewing a diff between two versions of a file help you see the bug that was introduced?
The diff function showed me the difference between the two files and
the specific line numbers where the changes were made. This made it very
easy for me to spot where the changes were made and hence it helped me see where the bug was introduced.

How could having easy access to the entire history of a file make you a more efficient programmer in the long run?
Having easy access to the entire history helps me see and understand
the changes that were made to the the file/code. I can easily compare
these changes and find out bugs to debug my code.

What do you think are the pros and cons of manually choosing when to create a commit, like you do in Git, vs having versions automatically saved, like Google Docs does?
Pros:
- flexible
- logical commits and save points
Cons:
- user may forget to commit

Why do you think some version control systems, like Git, allow saving multiple files in one commit, while others, like Google Docs, treat each file separately?
In programming multiple files are interrelated, therefore, certain 
commits can affect multiple files. Hence, Git allows saving multiple 
files in one commit.

How can you use the commands git log and git diff to view the history of files?
git log is used to list out commits for a particular repo while git
diff is used for comparing two commits.

How might using version control make you more confident to make changes that could break something?
Version control gives me the ability to roll-back my code to a version
where everything worked. So I don't have to worry about my code breaking
since I can always go back, compare and debug.

Now that you have your workspace set up, what do you want to try using Git for?
I want to use Git to manage my code and collaborate with other coders.
